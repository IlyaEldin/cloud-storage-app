import { useCallback, useEffect, useContext } from "react";
import File from "./File";
import FileSearch from "../FileSearch/FileSearch";
import FileUpload from "../FileUpload/FileUpload";
import DropZone from "../DropZone/DropZone";
import { useFileSearch } from "../../hooks/useFileSearch";
import { useFiles } from "../../hooks/useFiles";
import { formatFileSize } from "../../utils/formatFileSize";
import { UserContext } from "../UserContext/UserContext";
import classes from "./MyFile.module.css";

export default function MyFile() {
  const { userId } = useContext(UserContext);
  const { files, searchValue, setFiles, loadFiles, handleSearch } =
    useFileSearch(userId);
  const { uploadFile, uploadingFileWithMulter, deleteFile } = useFiles();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadFiles("");
  }, [loadFiles]);

  const handleFileDelete = (deletedFileId) => {
    setFiles((prevFiles) =>
      prevFiles.filter((file) => file.id !== deletedFileId)
    );
  };

  const processFileUpload = useCallback(
    async (file) => {
      let savedFileId = null;

      try {
        const dotIndex = file.name.lastIndexOf(".");
        const fileName = file.name.substring(0, dotIndex); //–±–µ—Ä–µ–º –∏–º—è –¥–æ —Ç–æ—á–∫–∏
        const fileExtension = file.name.substring(dotIndex + 1); //–±–µ—Ä–µ–º —Ç–∏–ø –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        const sizeFile = formatFileSize(file.size); // –±—Ä–µ–º —Ä–∞–∑–º–µ—Ä

        const metadataResult = await uploadFile(
          userId,
          fileName,
          fileExtension,
          sizeFile
        ); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

        if (!metadataResult.success || !metadataResult.fileId) {
          throw new Error(
            metadataResult.error || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"
          );
        }

        savedFileId = metadataResult.fileId; // –ø–æ–ª—É—á–∏–ª–∏ id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

        const uploadResult = await uploadingFileWithMulter(
          userId,
          savedFileId,
          file
        ); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º id

        if (!uploadResult.success) {
          throw new Error(uploadResult.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
        }

        await loadFiles(searchValue); //–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        return { success: true, fileName: file.name };
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error.message);
        if (savedFileId) {
          try {
            await deleteFile(userId, savedFileId); //—É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
          } catch (deleteError) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ:", deleteError.message);
          }
        }
        return { success: false, error: error.message, fileName: file.name };
      }
    },
    [
      uploadFile,
      uploadingFileWithMulter,
      deleteFile,
      loadFiles,
      searchValue,
      userId,
    ]
  );

  const handleFileSelect = useCallback(
    async (files) => {
      const results = [];

      for (const file of files) {
        const result = await processFileUpload(file);
        results.push(result);
      }

      const successful = results.filter((r) => r.success).length;
      const failed = results.filter((r) => !r.success).length;

      if (failed > 0) {
        alert(
          `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${successful} —Ñ–∞–π–ª–æ–≤\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${failed} —Ñ–∞–π–ª–æ–≤`
        );
      }
    },
    [processFileUpload]
  );

  const handleFilesDrop = useCallback(
    async (files) => {
      await handleFileSelect(files);
    },
    [handleFileSelect]
  );

  return (
    <DropZone onFilesDrop={handleFilesDrop}>
      <div className={classes.explorer}>
        <div className={classes.header}>
          <h2>–ú–æ–∏ —Ñ–∞–π–ª—ã</h2>
          <div className={classes.userPanel}>
            <FileUpload onFileSelect={handleFileSelect} multiple={true} />
          </div>
        </div>

        <div className={classes.uploadHint}>
          üìç –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        </div>

        <FileSearch searchValue={searchValue} onSearch={handleSearch} />

        <div className={classes.section}>
          {files && files.length > 0 ? (
            files.map((file) => (
              <File key={file.id} file={file} onFileDelete={handleFileDelete} />
            ))
          ) : (
            <div className={classes.emptyState}>
              {searchValue ? "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" : "–§–∞–π–ª–æ–≤ –Ω–µ—Ç"}
            </div>
          )}
        </div>
      </div>
    </DropZone>
  );
}

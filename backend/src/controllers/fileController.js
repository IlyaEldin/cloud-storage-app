const db = require('../config/database');
const fs = require('fs');

const getFilesByUserId = async (req, res) => {

    try {
        const { id } = req.params;

        console.log(id);


        const result = await db.getFilesByUserId(id);

        console.log(result);

        return res.status(201).json({
            result
        });
    }
    catch (error) {
        console.log('getFiles:', error.message);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }

};

// controllers/fileController.js
const removeFile = async (req, res) => {
    try {
        const { idUser, idFiles } = req.body;
        console.log(idUser);

        const result = await db.deleteFile(idFiles, idUser);


        return res.status(200).json({
            success: true,
            message: '–§–∞–π–ª —É–¥–∞–ª–µ–Ω',
            deletedCount: result.deleted,
            filePath: result.filePath
        });
    } catch (error) {
        console.log('removeFile error:', error.message);
        res.status(500).json({
            success: false,
            error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
};

// controllers/fileController.js
const uploadFile = async (req, res) => {
    try {
        const { idUser, namefile, typefile, sizeFile } = req.body;


        const result = await db.addFile(idUser, namefile, typefile, sizeFile);


        // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú fileId –∫–ª–∏–µ–Ω—Ç—É
        return res.status(200).json({
            success: true,
            message: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
            fileId: result.id // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ db.addFile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        });
    }
    catch (error) {
        console.log('uploadFile error:', error.message);
        res.status(500).json({
            success: false,
            error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞"
        });
    }
};

// controllers/fileController.js
const uploadFileWithMulter = async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({
                success: false,
                error: "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω"
            });
        }

        const { userId, fileId } = req.query;

        // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ü–ò–°–¨ –í –ë–î –° –ü–£–¢–ï–ú –ö –§–ê–ô–õ–£
        const result = await db.updateFilePath(fileId, req.file.path);

        res.status(201).json({
            success: true,
            message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
            fileId: fileId,
            filePath: req.file.path
        });

    } catch (error) {
        console.log('‚ùå File upload error:', error.message);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
};

// controllers/fileController.js - –í–ê–†–ò–ê–ù–¢ –° –¢–†–ê–ù–°–õ–ò–¢–ï–†–ê–¶–ò–ï–ô
const transliterate = (text) => {
    const cyrToLat = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
        '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
        '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
        '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu',
        '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo', '–ñ': 'Zh',
        '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O',
        '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'Ts',
        '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu',
        '–Ø': 'Ya',
        ' ': '_', '(': '', ')': '', '[': '', ']': '', '{': '', '}': ''
    };

    return text.split('').map(char => cyrToLat[char] || char).join('');
};

const downloadFile = async (req, res) => {
    try {
        const { fileId } = req.params;

        const fileInfo = await db.getFileById(fileId);
        if (!fileInfo) {
            return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const filePath = fileInfo.file_path;
        if (!filePath || !fs.existsSync(filePath)) {
            return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
        }

        // ‚úÖ –¢–†–ê–ù–°–õ–ò–¢–ï–†–ò–†–£–ï–ú –ö–ò–†–ò–õ–õ–ò–¶–£ –í –õ–ê–¢–ò–ù–ò–¶–£
        const originalName = `${fileInfo.namefile}.${fileInfo.typefile}`;
        let safeFileName = `${transliterate(fileInfo.namefile)}.${fileInfo.typefile}`;

        // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –û–¢ –ù–ï–î–û–ü–£–°–¢–ò–ú–´–• –°–ò–ú–í–û–õ–û–í –í –ó–ê–ì–û–õ–û–í–ö–ê–•
        safeFileName = safeFileName.replace(/[^\x20-\x7E]/g, ''); // —É–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã

        res.setHeader('Content-Disposition', `attachment; filename="${safeFileName}"`);
        res.setHeader('Content-Type', 'application/octet-stream');
        res.setHeader('Content-Length', fs.statSync(filePath).size);

        const fileStream = fs.createReadStream(filePath);
        fileStream.pipe(res);

    } catch (error) {
        console.log('‚ùå Download error:', error.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};


const getFilesBySearch = async (req, res) => {
    try {
        const id = req.params.id;
        const searchValue = req.query.search;

        console.log('üîç Search request:', { id, searchValue });

        let result;
        if (searchValue && searchValue.trim() !== '') {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Node.js
            const allFiles = await db.getFilesByUserId(id);
            const searchTerm = searchValue.trim().toLowerCase();

            result = allFiles.filter(file =>
                file.namefile.toLowerCase().includes(searchTerm)
            );
        } else {
            // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            result = await db.getFilesByUserId(id);
        }

        console.log('üîç Search result:', result.length, 'files found');

        return res.status(200).json({
            success: true,
            result: result
        });
    }
    catch (error) {
        console.log('‚ùå getFilesBySearch error:', error.message);
        res.status(500).json({
            success: false,
            error: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"
        });
    }
};


module.exports = { getFilesByUserId, removeFile, uploadFile, uploadFileWithMulter, downloadFile, getFilesBySearch };